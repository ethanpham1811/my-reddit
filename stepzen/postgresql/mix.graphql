type TopTrending {
  id: ID!
  title: String!
  body: String!
  groupBy: String
  totalUpvotes: Int
  created_at: Date
}
type PopularSub {
  id: ID!
  name: String!
  headline: String
  member: Int
  isChildrenContent: Boolean
  groupBy: String
}

type Query {
  topTrending(quantity: Int!): [TopTrending]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        p."id",
        p."title",
        p."body",
        p."created_at",
        "totalUpvotes",
        'Top trending post' AS "groupBy"
      FROM "post" "p"
      JOIN (
        SELECT
            "post_id",
            SUM(CASE WHEN "upvote" = true THEN 1 ELSE 0 END) - SUM(CASE WHEN "upvote" = false THEN 1 ELSE 0 END) AS "totalUpvotes"
        FROM "vote"
        GROUP BY "post_id"
        ORDER BY "totalUpvotes" DESC
        LIMIT $1
      ) AS "subquery"
      ON "p"."id" = "subquery"."post_id";
      """
      configuration: "postgresql_config"
    )
  topSubreddits(quantity: Int!): [PopularSub]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        s."id",
        s."name",
        s."headline",
        s."member",
        s."isChildrenContent",
        'Popular communities' AS "groupBy"
      FROM "subreddit" s
      ORDER BY s."member" DESC
      LIMIT $1
      """
      configuration: "postgresql_config"
    )
  # topSubredditsAndPosts: [TopPostNSubreddit] @sequence(steps: [{ query: "topPosts", as: "posts" }, { query: "topSubreddits", as: "subreddits" }])
}

# type TopPostNSubreddit {
#   id: ID!
#   title: String
#   coverUrl: String
#   created_at: DateTime
#   description: String
#   headline: String
#   isChildrenContent: Boolean
#   member: Int
#   name: String
#   subType: String
#   totalUpvotes: Int
#   totalMembers: Int
#   groupBy: String
# }

# type Query {
#   topPosts: [TopPostNSubreddit]
#     @dbquery(
#       type: "postgresql"
#       schema: "public"
#       query: """
#       SELECT
#         p.id,
#         p.title,
#         null AS "coverUrl",
#         p."created_at",
#         null AS "description",
#         null AS "headline",
#         null AS "isChildrenContent",
#         null AS "member",
#         null AS "name",
#         SUM(CAST("upvote" AS INT)) AS "totalUpvotes",
#         'popular' AS "groupBy"
#       FROM
#         "post" p
#         LEFT JOIN "vote" v ON p.id = v."post_id"
#       WHERE
#         v."upvote" = true
#       GROUP BY
#         p.id
#       ORDER BY
#         "totalUpvotes" DESC
#       LIMIT 3
#       """
#       configuration: "postgresql_config"
#     )
#   topSubreddits: [TopPostNSubreddit]
#     @dbquery(
#       type: "postgresql"
#       schema: "public"
#       query: """
#       SELECT
#         s.id,
#         null AS "title",
#         s."coverUrl",
#         s."created_at",
#         s."description",
#         s."headline",
#         s."isChildrenContent",
#         s."member",
#         s."name",
#         s."subType",
#         COUNT(m.id) AS "totalMembers",
#         'hot' AS "groupBy"
#       FROM
#         "subreddit" s
#         LEFT JOIN "member" m ON s.id = m."subreddit_id"
#       GROUP BY
#         s.id
#       ORDER BY
#         "totalMembers" DESC
#       LIMIT 3
#       """
#       configuration: "postgresql_config"
#     )
#   topSubredditsAndPosts: [TopPostNSubreddit] @sequence(steps: [{ query: "topPosts" }, { query: "topSubreddits" }])
# }
