type TopTrending {
  id: ID!
  title: String!
  body: String!
  groupBy: String
  totalUpvotes: Int
  subreddit: Subreddit
    @materializer(query: "subredditUsingPost_subreddit_id_fkey")
  subreddit_id: ID!
  created_at: Date
}

type PopularSub {
  id: ID!
  name: String!
  headline: String
  member: Int
  isChildrenContent: Boolean
  groupBy: String
}

type Query {
  topTrending(quantity: Int!): [TopTrending]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        p."id",
        p."title",
        p."body",
        p."created_at",
        p."subreddit_id",
        "totalUpvotes",
        'Top trending post' AS "groupBy"
      FROM "post" "p"
      JOIN (
        SELECT
            "post_id",
            SUM(CASE WHEN "upvote" = true THEN 1 ELSE 0 END) - SUM(CASE WHEN "upvote" = false THEN 1 ELSE 0 END) AS "totalUpvotes"
        FROM "vote"
        GROUP BY "post_id"
        ORDER BY "totalUpvotes" DESC
        LIMIT $1
      ) AS "subquery"
      ON "p"."id" = "subquery"."post_id";
      """
      configuration: "postgresql_config"
    )
  topSubreddits(quantity: Int!): [PopularSub]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        s."id",
        s."name",
        s."headline",
        s."member",
        s."isChildrenContent",
        'Popular communities' AS "groupBy"
      FROM "subreddit" s
      ORDER BY s."member" DESC
      LIMIT $1
      """
      configuration: "postgresql_config"
    )
}
