type QueriedTrending {
  id: ID!
  title: String!
  body: String
  created_at: Date
  images: [String]
  link: String
  subreddit_id: ID!
  subreddit: Subreddit @materializer(query: "subredditUsingPost_subreddit_id_fkey")
  groupBy: String
  totalUpvotes: Int
  totalComments: Int
}

type QueriedPost {
  id: ID!
  title: String!
  body: String
  created_at: DateTime!
  images: [String]
  link: String
  linkDescription: String
  user_id: ID!
  subreddit_id: ID!
  user: User @materializer(query: "userUsingPost_user_id_fkey")
  subreddit: Subreddit @materializer(query: "subredditUsingPost_subreddit_id_fkey")
  comment: [Comment] @materializer(query: "commentUsingComment_post_id_fkey")
  vote: [Vote] @materializer(query: "voteUsingVote_post_id_fkey")
  totalUpvotes: Int
  totalComments: Int
  groupBy: String
  totalItems: Int
}

type QueriedSub {
  id: ID!
  name: String!
  headline: String
  member: Int
  isChildrenContent: Boolean
  groupBy: String
  totalItems: Int
  user_id: ID!
  user: User @materializer(query: "userUsingSubreddit_user_id_fkey")
}

type QueriedUser {
  id: ID!
  username: String!
  fullName: String
  followers: Int
  groupBy: String
  totalItems: Int
}

type Query {
  queriedTrending(quantity: Int!): [QueriedTrending]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        p."id",
        p."title",
        p."body",
        p."created_at",
        p."subreddit_id",
        p."link",
        p."images",
        "subquery"."totalUpvotes",
        (SELECT COUNT(*) FROM "comment" WHERE "post_id" = p."id") AS "totalComments",
        'Top trending' AS "groupBy"
      FROM "post" "p"
      JOIN (
        SELECT
            "post_id",
            SUM(CASE WHEN "upvote" = true THEN 1 ELSE 0 END) - SUM(CASE WHEN "upvote" = false THEN 1 ELSE 0 END) AS "totalUpvotes"
        FROM "vote"
        GROUP BY "post_id"
      ORDER BY "totalUpvotes" DESC
      LIMIT $1
      ) AS "subquery"
      ON "p"."id" = "subquery"."post_id";
      """
      configuration: "postgresql_config"
    )
  queriedPosts(offset: Int, limit: Int, term: String!): [QueriedPost]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      WITH "posts" AS (
        SELECT
          p."id",
          p."title",
          p."body",
          p."created_at",
          p."images",
          p."subreddit_id",
          p."link",
          p."linkDescription",
          p."user_id",
          COALESCE("subquery"."totalUpvotes", 0) AS "totalUpvotes",
          (SELECT COUNT(*) FROM "comment" WHERE "post_id" = p."id") AS "totalComments",
          'Post' AS "groupBy",
          (SELECT array_agg(v) FROM "vote" v WHERE v."post_id" = p."id") AS "vote",
          (SELECT array_agg(c) FROM "comment" c WHERE c."post_id" = p."id") AS "comment"
        FROM "post" "p"
        LEFT JOIN (
          SELECT
            "post_id",
            SUM(CASE WHEN "upvote" = true THEN 1 ELSE 0 END) - SUM(CASE WHEN "upvote" = false THEN 1 ELSE 0 END) AS "totalUpvotes"
          FROM "vote"
          GROUP BY "post_id"
        ) AS "subquery"
        ON "p"."id" = "subquery"."post_id"
        WHERE lower(p."title") LIKE '%' || lower($3) || '%' OR lower(p."body") LIKE '%' || lower($3) || '%' OR lower(p."linkDescription") LIKE '%' || lower($3) || '%'
      )
      SELECT
        *,
        (SELECT COUNT(*) FROM "posts") AS "totalItems"
      FROM "posts"
      ORDER BY "totalUpvotes" DESC
      LIMIT $2 OFFSET $1
      """
      configuration: "postgresql_config"
    )

  queriedSubs(offset: Int, limit: Int, term: String!): [QueriedSub]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      WITH "subs" AS (
        SELECT
          s."id",
          s."name",
          s."headline",
          s."member",
          s."isChildrenContent",
          s."user_id",
          'Communities' AS "groupBy"
        FROM "subreddit" s
        WHERE lower(s."name") LIKE '%' || lower($3) || '%' OR lower(s."headline") LIKE '%' || lower($3) || '%'
      )
      SELECT
        *,
        (SELECT COUNT(*) FROM "subs") AS "totalItems"
      FROM "subs"
      ORDER BY "member" DESC
      LIMIT $2 OFFSET $1
      """
      configuration: "postgresql_config"
    )
  queriedUsers(offset: Int, limit: Int, term: String!): [QueriedUser]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      WITH "users" AS (
        SELECT
          u."id",
          u."username",
          u."fullName",
          u."followers",
          'People' AS "groupBy"
        FROM "user" u
        WHERE lower(u."username") LIKE '%' || lower($3) || '%' OR lower(u."fullName") LIKE '%' || lower($3) || '%'
      )
      SELECT
        *,
        (SELECT COUNT(*) FROM "users") AS "totalItems"
      FROM "users"
      ORDER BY "username" DESC
      LIMIT $2 OFFSET $1
      """
      configuration: "postgresql_config"
    )
}
