type Post {
  id: ID!
  title: String!
  body: String
  created_at: DateTime!
  images: [String]
  link: String
  linkDescription: String
  user_id: ID!
  subreddit_id: ID!
  user: User @materializer(query: "userUsingPost_user_id_fkey")
  subreddit: Subreddit @materializer(query: "subredditUsingPost_subreddit_id_fkey")
  comment: [Comment] @materializer(query: "commentUsingComment_post_id_fkey")
  vote: [Vote] @materializer(query: "voteUsingVote_post_id_fkey")
  totalUpvotes: Int
  totalComments: Int
}
"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Post' "
  post(id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
         p."body",
         p."created_at",
         p."id",
         p."images",
         p."subreddit_id",
         p."title",
         p."user_id",
         p."link",
         p."linkDescription",
         (SELECT COUNT(*) FROM "comment" WHERE "post_id" = p."id") AS "totalComments"
       FROM "post" "p"
       WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  postList: [Post] @dbquery(type: "postgresql", schema: "public", table: "post", configuration: "postgresql_config")
  postPaginatedList(offset: Int, limit: Int): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT
        p."body",
        p."created_at",
        p."id",
        p."images",
        p."subreddit_id",
        p."title",
        p."user_id",
        p."link",
        p."linkDescription",
        (SELECT COUNT(*) FROM "comment" WHERE "post_id" = p."id") AS "totalComments",
        COALESCE("subquery"."totalUpvotes", 0) AS "totalUpvotes"
      FROM "post" "p"
      LEFT JOIN (
        SELECT
          "post_id",
          SUM(CASE WHEN "upvote" = true THEN 1 ELSE -1 END) AS "totalUpvotes"
        FROM "vote"
        GROUP BY "post_id"
      ) AS "subquery"
      ON "p"."id" = "subquery"."post_id"
      ORDER BY "created_at" DESC
      LIMIT $2 OFFSET $1;
      """
      configuration: "postgresql_config"
    )
  postUsingComment_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "images", "subreddit_id", "title", "user_id", "link", "linkDescription" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingVote_post_id_fkey(post_id: ID!): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "images", "subreddit_id", "title", "user_id", "link", "linkDescription" FROM "post" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Post' "
  deletePost(id: ID!): Post @dbquery(type: "postgresql", schema: "public", table: "post", dml: DELETE, configuration: "postgresql_config")
  insertPost(user_id: ID!, subreddit_id: ID!, body: String, title: String!, images: [String], link: String, linkDescription: String): Post
    @dbquery(type: "postgresql", schema: "public", table: "post", dml: INSERT, configuration: "postgresql_config")
  updatePost(id: ID!, body: String, images: [String], title: String, link: String, linkDescription: String): Post
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "post" SET
        "body" = COALESCE($2, "body"),
        "images" = COALESCE($3, "images"),
        "title" = COALESCE($4, "title"),
        "link" = COALESCE($5, "link"),
        "linkDescription" = COALESCE($6, "linkDescription")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
