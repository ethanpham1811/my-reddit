type User {
  comment: [Comment] @materializer(query: "commentUsingComment_user_id_fkey")
  coverUrl: String
  role: String!
  created_at: DateTime!
  dob: Date
  email: String
  followers: ID
  fullName: String
  id: ID!
  karma: ID
  photoUrl: String
  post: [Post] @materializer(query: "postUsingPost_user_id_fkey")
  username: String!
  vote: [Vote] @materializer(query: "voteUsingVote_user_id_fkey")
  socialLinks: [String]
  member_of_ids: [String]
  following_ids: [String]
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  commentUsingComment_user_id_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "text", "user_id" FROM "comment" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  postUsingPost_user_id_fkey(id: ID!): [Post]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "body", "created_at", "id", "images", "subreddit_id", "title", "user_id" FROM "post" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'User' "
  user(id: ID!): User @dbquery(type: "postgresql", schema: "public", table: "user", configuration: "postgresql_config")
  userByEmail(email: String!): User @dbquery(type: "postgresql", schema: "public", table: "user", configuration: "postgresql_config")
  userByUsername(username: String!): User @dbquery(type: "postgresql", schema: "public", table: "user", configuration: "postgresql_config")
  userList: [User] @dbquery(type: "postgresql", schema: "public", table: "user", configuration: "postgresql_config")
  userPaginatedList(first: Int, after: Int): [User]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "coverUrl", "created_at", "dob", "email", "followers", "fullName", "id", "karma", "photoUrl", "username" FROM "user" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  userUsingComment_user_id_fkey(user_id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "coverUrl", "created_at", "dob", "email", "followers", "fullName", "id", "karma", "photoUrl", "username" FROM "user" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  userUsingPost_user_id_fkey(user_id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "coverUrl", "created_at", "dob", "email", "followers", "fullName", "id", "karma", "photoUrl", "username" FROM "user" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  userUsingVote_user_id_fkey(user_id: ID!): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "coverUrl", "created_at", "dob", "email", "followers", "fullName", "id", "karma", "photoUrl", "username" FROM "user" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  voteUsingVote_user_id_fkey(id: ID!): [Vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "post_id", "upvote", "user_id" FROM "vote" WHERE "user_id" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'User' "
  deleteUser(id: ID!): User @dbquery(type: "postgresql", schema: "public", table: "user", dml: DELETE, configuration: "postgresql_config")
  insertUser(email: String, role: String, fullName: String, coverUrl: String, username: String!, dob: Date): User
    @dbquery(type: "postgresql", schema: "public", table: "user", dml: INSERT, configuration: "postgresql_config")
  updateUser(
    id: ID!
    coverUrl: String
    created_at: Date
    dob: Date
    email: String
    followers: ID
    fullName: String
    karma: ID
    photoUrl: String
    username: String
    member_of_ids: [String]
    following_ids: [String]
    role: String
  ): User
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "user" SET
        "coverUrl" = COALESCE($2, "coverUrl"),
        "created_at" = COALESCE($3, "created_at"),
        "dob" = COALESCE($4, "dob"),
        "email" = COALESCE($5, "email"),
        "followers" = COALESCE($6, "followers"),
        "fullName" = COALESCE($7, "fullName"),
        "karma" = COALESCE($8, "karma"),
        "photoUrl" = COALESCE($9, "photoUrl"),
        "username" = COALESCE($10, "username"),
        "member_of_ids" = COALESCE($11, "member_of_ids"),
        "following_ids" = COALESCE($12, "following_ids"),
        "role" = COALESCE($13, "role")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
